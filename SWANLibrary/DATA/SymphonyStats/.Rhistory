team <- c(team, xpathSApply(html, sprintf("//table[2]/tr[%s]/td[2]", i), xmlValue))
year <- c(year, xpathSApply(html, sprintf("//table[2]/tr[%s]/td[3]", i), xmlValue))
postseason <- c(postseason, xpathSApply(html, sprintf("//table[2]/tr[%s]/td[4]", i), xmlValue))
} else {
code <- c(code, xpathSApply(html, sprintf("substring(concat(//table[2]/tr[position()=%s-1]/td[position()=1 and string-length(.)=3],
//table[2]/tr[position()=%s-2]/td[position()=1 and string-length(.)=3]), 1, 3)", i, i), xmlValue))
team <- c(team, xpathSApply(html, sprintf("//table[2]/tr[%s]/td[1]", i), xmlValue))
year <- c(year, xpathSApply(html, sprintf("//table[2]/tr[%s]/td[2]", i), xmlValue))
postseason <- c(postseason, xpathSApply(html, sprintf("//table[2]/tr[%s]/td[3]", i), xmlValue))
}
}
# COMBINE LISTS INTO DATA FRAME
playoffs <- data.frame(code = unlist(code),
team = unlist(team),
year = unlist(year),
postseason = unlist(postseason))
View(playoffs)
playoffs[playoffs$code='CHC',]
playoffs[playoffs$code=='CHC',]
# LIST OF DATES
x <- lapply(0:5, function(i) as.Date("2015-04-10")+i)
# LIST OF URLS
utmp <- "http://www.basketball-reference.com/friv/dailyleaders.cgi?month=%d&day=%d&year=%d"
urlist <- c(lapply(x, function(i) sprintf(utmp, as.numeric(format(i, '%m')),
as.numeric(format(i, '%d')),
as.numeric(format(i, '%y')))))
# USER DEFINED FUNCTION
tables <- vector("list", length(x))
tabledwnld <- function(dt, url, i) {
tableNodes <- readHTMLTable(url)
tables[[i]] <- tableNodes[[1]]
tables[[i]]['Date'] <- dt
return(tables)
}
# APPLY ABOVE FUNCTION
data <- mapply(tabledwnld, x, urlist, 1:6)
v1 <- as.vector(matrix(rnorm(25),1))
v2 <- as.vector(matrix(rnorm(25),1))
addfct <- function(x, y){
x + y
}
output1 <- sapply(v1, addfct, v2)
output2 <- outer(v1, v2, addfct)
output1 <- sapply(v2, addfct, v1)
library(ROBDC)
library(RODBC)
conn <-odbcConnect(paste0('Provider=Microsoft.ACE.OLEDB.12.0;',
'Data Source=D:\\Freelance Work\\Scripts\\PasswordProtectedSQL.xlsm;',
'Extended Properties="Excel 12.0 Macro;HDR=YES;"'))
df <- sqlQuery(conn, "SELECT * FROM [DATA$]")
close(conn)
conn <-odbcConnect(paste0('Provider=Microsoft.ACE.OLEDB.12.0;',
'Data Source="D:\\Freelance Work\\Scripts\\PasswordProtectedSQL.xlsm";',
'Extended Properties="Excel 12.0 Macro;HDR=YES;"'))
df <- sqlQuery(conn, "SELECT * FROM [DATA$]")
close(conn)
conn <- odbcConnect('Provider=Microsoft.ACE.OLEDB.12.0;Data Source=D:\Freelance Work\Scripts\PasswordProtectedSQL.xlsm;Extended Properties="Excel 12.0 Macro;HDR=YES;";')
conn <- odbcConnect('Provider=Microsoft.ACE.OLEDB.12.0;Data Source=D:\\Freelance Work\\Scripts\\PasswordProtectedSQL.xlsm;Extended Properties="Excel 12.0 Macro;HDR=YES;";')
conn <-odbcConnect(paste0('Provider=Microsoft.ACE.OLEDB.12.0;',
'Data Source=D:\\Freelance Work\\Scripts\\TransposeEntityValue.xlsm;',
'Extended Properties="Excel 12.0 Macro;HDR=YES;"'))
conn <- odbcConnect('Provider=Microsoft.ACE.OLEDB.12.0;Data Source=D:\\Freelance Work\\Scripts\\PasswordProtectedSQL.xlsm;Extended Properties="Excel 12.0 Macro;HDR=YES;";')
df <- sqlQuery(conn, "SELECT * FROM [DATA$]")
close(conn)
conn <-odbcDriverConnect('driver={Microsoft Excel Driver (*.xls, *.xlsx, *.xlsm, *.xlsb);DBQ=D:\\Freelance Work\\Scripts\\PasswordProtectedSQL.xlsm;')
df <- sqlQuery(conn, "SELECT * FROM [DATA$]")
close(conn)
conn <-odbcDriverConnect('driver={Microsoft Excel Driver (*.xls, *.xlsx, *.xlsm, *.xlsb)};DBQ=D:\\Freelance Work\\Scripts\\PasswordProtectedSQL.xlsm;')
df <- sqlQuery(conn, "SELECT * FROM [DATA$]")
close(conn)
View(df)
conn <-odbcDriverConnect('Driver={Microsoft Excel Driver (*.xls, *.xlsx, *.xlsm, *.xlsb)};DBQ=D:\\Freelance Work\\Scripts\\PasswordProtectedSQL.xlsm;')
df <- sqlQuery(conn, "SELECT * FROM [DATA$]")
close(conn)
conn <-odbcDriverConnect('Driver={Microsoft Excel Driver (*.xls, *.xlsx, *.xlsm, *.xlsb)};DBQ=D:\\Freelance Work\\Scripts\\PasswordProtectedSQL.xlsm;')
df <- sqlQuery(conn, "SELECT * FROM [DATA$]")
close(conn)
View(df)
library(RODBC)
xlconn <-odbcDriverConnect('Driver={Microsoft Excel Driver (*.xls, *.xlsx, *.xlsm, *.xlsb)};
DBQ=D:\\Freelance Work\\Scripts\\XLSM\\DuplicatesSQL.xlsm')
selectdf <- sqlQuery(xlconn, "SELECT * FROM [RESULTS$]")
close(xlconn)
df <- xmlToDataFrame("D:/Freelance Work/Scripts/SWANLibrariesAddress_ps.xml")
library(XML)
df <- xmlToDataFrame("D:/Freelance Work/Scripts/SWANLibrariesAddress_ps.xml")
View(df)
strsplit(df$address, split=",")
df <- xmlToDataFrame("D:/Freelance Work/Scripts/SWANLibrariesAddress_ps.xml",
stringsAsFactors = FALSE)
strsplit(df$address, split=",")
df[c("Address",  "City", "Zip")] <- sapply(seq(nrow(df)), function(i)
c(strsplit(df$address[[i]], split=",")[[1]][1],
strsplit(df$address[[i]], split=",")[[1]][2],
strsplit(df$address[[i]], split=",")[[1]][3]))
View(df)
c(strsplit(df$address[[1]], split=",")[[1]][1],
strsplit(df$address[[1]], split=",")[[1]][2],
strsplit(df$address[[1]], split=",")[[1]][3])
View(df)
df <- xmlToDataFrame("D:/Freelance Work/Scripts/SWANLibrariesAddress_ps.xml",
stringsAsFactors = FALSE)
df[, c("Address",  "City", "Zip")] <- sapply(seq(nrow(df)), function(i)
c(strsplit(df$address[[i]], split=",")[[1]][1],
strsplit(df$address[[i]], split=",")[[1]][2],
strsplit(df$address[[i]], split=",")[[1]][3]))
View(df)
c(strsplit(df$address[[2]], split=",")[[1]][1],
strsplit(df$address[[2]], split=",")[[1]][2],
strsplit(df$address[[2]], split=",")[[1]][3])
df$Address<- sapply(seq(nrow(df)), function(i)
strsplit(df$address[[i]], split=",")[[1]][1])
View(df)
df$Address<- sapply(seq(nrow(df)), function(i)
strsplit(df$address[[i]], split=",")[[1]][1])
df$City- sapply(seq(nrow(df)), function(i)
strsplit(df$address[[i]], split=",")[[1]][2])
df$Zip<- sapply(seq(nrow(df)), function(i)
gsub("IL ", "", strsplit(df$address[[i]], split=",")[[1]][3]))
View(df)
df <- xmlToDataFrame("D:/Freelance Work/Scripts/SWANLibrariesAddress_ps.xml",
stringsAsFactors = FALSE)
df$Address<- sapply(seq(nrow(df)), function(i)
strsplit(df$address[[i]], split=",")[[1]][1])
df$City- sapply(seq(nrow(df)), function(i)
strsplit(df$address[[i]], split=",")[[1]][2])
df$Zip<- sapply(seq(nrow(df)), function(i)
gsub("IL ", "", strsplit(df$address[[i]], split=",")[[1]][3]))
View(df)
df <- xmlToDataFrame("D:/Freelance Work/Scripts/SWANLibrariesAddress_ps.xml",
stringsAsFactors = FALSE)
df$Address<- sapply(seq(nrow(df)), function(i)
strsplit(df$address[[i]], split=",")[[1]][1])
df$City- sapply(seq(nrow(df)), function(i)
strsplit(df$address[[i]], split=",")[[1]][2])
df$Zip<- sapply(seq(nrow(df)), function(i)
gsub("IL ", "", strsplit(df$address[[i]], split=",")[[1]][3]))
View(df)
df <- xmlToDataFrame("D:/Freelance Work/Scripts/SWANLibrariesAddress_ps.xml",
stringsAsFactors = FALSE)
View(df)
df$Address<- sapply(seq(nrow(df)), function(i)
strsplit(df$address[[i]], split=",")[[1]][1])
df$City- sapply(seq(nrow(df)), function(i)
strsplit(df$address[[i]], split=",")[[1]][2])
df$Zip<- sapply(seq(nrow(df)), function(i)
gsub("IL ", "", strsplit(df$address[[i]], split=",")[[1]][3]))
View(df)
df <- xmlToDataFrame("D:/Freelance Work/Scripts/SWANLibrariesAddress_ps.xml",
stringsAsFactors = FALSE)
df$Address<- sapply(seq(nrow(df)), function(i)
strsplit(df$address[[i]], split=",")[[1]][1])
df$City- sapply(seq(nrow(df)), function(i)
strsplit(df$address[[i]], split=",")[[1]][2])
df$Zip<- sapply(seq(nrow(df)), function(i)
gsub("IL ", "", strsplit(df$address[[i]], split=",")[[1]][3]))
View(df)
sapply(seq(nrow(df)), function(i)
strsplit(df$address[[i]], split=",")[[1]][1])
sapply(seq(nrow(df)), function(i)
strsplit(df$address[[i]], split=",")[[1]][2])
df <- xmlToDataFrame("D:/Freelance Work/Scripts/SWANLibrariesAddress_ps.xml",
stringsAsFactors = FALSE)
df$Address<- sapply(seq(nrow(df)), function(i)
strsplit(df$address[[i]], split=",")[[1]][1])
df$City- sapply(seq(nrow(df)), function(i)
trimws(strsplit(df$address[[i]], split=",")[[1]][2]))
df$Zip<- sapply(seq(nrow(df)), function(i)
gsub("IL ", "", strsplit(df$address[[i]], split=",")[[1]][3]))
sapply(seq(nrow(df)), function(i)
length(strsplit(df$address[[i]], split=",")[[1]][1]))
sapply(seq(nrow(df)), function(i)
length(strsplit(df$address[[i]], split=",")[[1]]))
df$Address<- sapply(seq(nrow(df)), function(i)
strsplit(df$address[[i]], split=",")[[1]][1])
df$City- sapply(seq(nrow(df)), function(i)
trimws(strsplit(df$address[[i]], split=",")[[1]][2]))
df$Zip<- sapply(seq(nrow(df)), function(i)
gsub("IL ", "", strsplit(df$address[[i]], split=",")[[1]][3]))
sapply(seq(nrow(df)), function(i)
trimws(strsplit(df$address[[i]], split=",")[[1]][2]))
df <- xmlToDataFrame("D:/Freelance Work/Scripts/SWANLibrariesAddress_ps.xml",
stringsAsFactors = FALSE)
df$Address<- sapply(seq(nrow(df)), function(i)
strsplit(df$address[[i]], split=",")[[1]][1])
df$City <- sapply(seq(nrow(df)), function(i)
trimws(strsplit(df$address[[i]], split=",")[[1]][2]))
df$Zip<- sapply(seq(nrow(df)), function(i)
gsub("IL ", "", strsplit(df$address[[i]], split=",")[[1]][3]))
View(df)
View(df)
df <- xmlToDataFrame("D:/Freelance Work/Scripts/SWANLibrariesAddress_ps.xml",
stringsAsFactors = FALSE)
df$Address <- gsub("Learning Center ", gsub("Learning Resources Center ", "", df$address))
df$Address<- sapply(seq(nrow(df)), function(i)
strsplit(df$address[[i]], split=",")[[1]][1])
df$City <- sapply(seq(nrow(df)), function(i)
trimws(strsplit(df$address[[i]], split=",")[[1]][2]))
df$Zip<- sapply(seq(nrow(df)), function(i)
gsub("IL ", "", strsplit(df$address[[i]], split=",")[[1]][3]))
df <- xmlToDataFrame("D:/Freelance Work/Scripts/SWANLibrariesAddress_ps.xml",
stringsAsFactors = FALSE)
df$Address <- gsub("Learning Center ", "", gsub("Learning Resources Center ", "", df$address))
df$Address<- sapply(seq(nrow(df)), function(i)
strsplit(df$address[[i]], split=",")[[1]][1])
df$City <- sapply(seq(nrow(df)), function(i)
trimws(strsplit(df$address[[i]], split=",")[[1]][2]))
df$Zip<- sapply(seq(nrow(df)), function(i)
gsub("IL ", "", strsplit(df$address[[i]], split=",")[[1]][3]))
View(df)
BingMapsAPIkey <- "AiUV813Xbo8CEariNmeksQ0jDJeR8mgbRjbEAQQ9b-OXarp_eKacFoucr-Apndb_"
geodfs <- lapply(seq(nrow(df))[1], function(i){
url <- paste0("http://dev.virtualearth.net/REST/v1/Locations/US/IL/",
df$Zip[[i]], "/", df$City[[i]], "/",
gsub(" ", "%20", df$Address[[i]], "?o=xml&key=", BingMapsAPIKey))
doc <- xmlParse(readlines(url))
data.frame(LAT = xpathApply(doc, "//GeocodePoint/Latitude", xmlValue),
LON = xpathApply(doc, "//GeocodePoint/Longitude", xmlValue))
})
geodfs <- lapply(seq(nrow(df))[1], function(i){
url <- paste0("http://dev.virtualearth.net/REST/v1/Locations/US/IL/",
df$Zip[[i]], "/", df$City[[i]], "/",
gsub(" ", "%20", df$Address[[i]]), "?o=xml&key=", BingMapsAPIKey)
doc <- xmlParse(readlines(url))
data.frame(LAT = xpathApply(doc, "//GeocodePoint/Latitude", xmlValue),
LON = xpathApply(doc, "//GeocodePoint/Longitude", xmlValue))
})
geodfs <- lapply(seq(nrow(df))[1], function(i){
url <- paste0("http://dev.virtualearth.net/REST/v1/Locations/US/IL/",
df$Zip[[i]], "/", df$City[[i]], "/",
gsub(" ", "%20", df$Address[[i]]), "?o=xml&key=", BingMapsAPIkey)
doc <- xmlParse(readlines(url))
data.frame(LAT = xpathApply(doc, "//GeocodePoint/Latitude", xmlValue),
LON = xpathApply(doc, "//GeocodePoint/Longitude", xmlValue))
})
geodfs <- lapply(seq(nrow(df))[1], function(i){
url <- paste0("http://dev.virtualearth.net/REST/v1/Locations/US/IL/",
df$Zip[[i]], "/", df$City[[i]], "/",
gsub(" ", "%20", df$Address[[i]]), "?o=xml&key=", BingMapsAPIkey)
doc <- xmlParse(readLines(url))
data.frame(LAT = xpathApply(doc, "//GeocodePoint/Latitude", xmlValue),
LON = xpathApply(doc, "//GeocodePoint/Longitude", xmlValue))
})
df <- xmlToDataFrame("D:/Freelance Work/Scripts/SWANLibrariesAddress_ps.xml",
stringsAsFactors = FALSE)
df$Address <- gsub("Learning Center ", "", gsub("Learning Resources Center ", "", df$address))
df$Address<- sapply(seq(nrow(df)), function(i)
strsplit(df$address[[i]], split=",")[[1]][1])
df$City <- sapply(seq(nrow(df)), function(i)
trimws(strsplit(df$address[[i]], split=",")[[1]][2]))
df$Zip<- sapply(seq(nrow(df)), function(i)
trimws(gsub("IL ", "", strsplit(df$address[[i]], split=",")[[1]][3])))
geodfs <- lapply(seq(nrow(df))[1], function(i){
url <- paste0("http://dev.virtualearth.net/REST/v1/Locations/US/IL/",
df$Zip[[i]], "/", gsub(" ", "%20", df$City[[i]]), "/",
gsub(" ", "%20", df$Address[[i]]), "?o=xml&key=", BingMapsAPIkey)
doc <- xmlParse(readLines(url))
data.frame(LAT = xpathApply(doc, "//GeocodePoint/Latitude", xmlValue),
LON = xpathApply(doc, "//GeocodePoint/Longitude", xmlValue))
})
df <- xmlToDataFrame("D:/Freelance Work/Scripts/SWANLibrariesAddress_ps.xml",
stringsAsFactors = FALSE)
df$Address <- gsub("Learning Center ", "", gsub("Learning Resources Center ", "", df$address))
df$Address<- sapply(seq(nrow(df)), function(i)
strsplit(df$address[[i]], split=",")[[1]][1])
df$City <- sapply(seq(nrow(df)), function(i)
trimws(strsplit(df$address[[i]], split=",")[[1]][2]))
df$Zip<- sapply(seq(nrow(df)), function(i)
trimws(gsub("\\.", "", gsub("IL ", "", strsplit(df$address[[i]], split=",")[[1]][3]))))
geodfs <- lapply(seq(nrow(df))[1], function(i){
url <- paste0("http://dev.virtualearth.net/REST/v1/Locations/US/IL/",
df$Zip[[i]], "/", gsub(" ", "%20", df$City[[i]]), "/",
gsub(" ", "%20", df$Address[[i]]), "?o=xml&key=", BingMapsAPIkey)
doc <- xmlParse(readLines(url))
data.frame(LAT = xpathApply(doc, "//GeocodePoint/Latitude", xmlValue),
LON = xpathApply(doc, "//GeocodePoint/Longitude", xmlValue))
})
View(df)
df <- xmlToDataFrame("D:/Freelance Work/Scripts/SWANLibrariesAddress_ps.xml",
stringsAsFactors = FALSE)
df$Address <- gsub("Learning Center ", "", gsub("Learning Resources Center ", "", df$address))
df$Address<- sapply(seq(nrow(df)), function(i)
gsub("\\.", "", strsplit(df$address[[i]], split=",")[[1]][1]))
df$City <- sapply(seq(nrow(df)), function(i)
trimws(strsplit(df$address[[i]], split=",")[[1]][2]))
df$Zip<- sapply(seq(nrow(df)), function(i)
trimws(gsub("IL ", "", strsplit(df$address[[i]], split=",")[[1]][3])))
View(df)
geodfs <- lapply(seq(nrow(df))[1], function(i){
url <- paste0("http://dev.virtualearth.net/REST/v1/Locations/US/IL/",
df$Zip[[i]], "/", gsub(" ", "%20", df$City[[i]]), "/",
gsub(" ", "%20", df$Address[[i]]), "?o=xml&key=", BingMapsAPIkey)
doc <- xmlParse(readLines(url))
data.frame(LAT = xpathApply(doc, "//GeocodePoint/Latitude", xmlValue),
LON = xpathApply(doc, "//GeocodePoint/Longitude", xmlValue))
})
doc <- xmlParse("http://dev.virtualearth.net/REST/v1/Locations/US/IL/60452/Oak%20Forest/15624%20S%20Central%20Ave?o=xml&key=AiUV813Xbo8CEariNmeksQ0jDJeR8mgbRjbEAQQ9b-OXarp_eKacFoucr-Apndb_")
geodfs <- lapply(seq(nrow(df))[1], function(i){
url <- paste0("http://dev.virtualearth.net/REST/v1/Locations/US/IL/",
df$Zip[[i]], "/", gsub(" ", "%20", df$City[[i]]), "/",
gsub(" ", "%20", df$Address[[i]]), "?o=xml&key=", BingMapsAPIkey)
doc <- xmlParse(url)
data.frame(LAT = xpathApply(doc, "//GeocodePoint/Latitude", xmlValue),
LON = xpathApply(doc, "//GeocodePoint/Longitude", xmlValue))
})
xpathApply(doc, "//GeocodePoint/Latitude", xmlValue)
xpathSApply(doc, "//GeocodePoint/Latitude", xmlValue)
xpathSApply(doc, "//GeocodePoint/Latitude", xmlValue)
doc
xpathSApply(doc, "//ns:GeocodePoint/ns:Latitude", xmlValue,
namespaces = c(ns="http://schemas.microsoft.com/search/local/ws/rest/v1"))
xpathSApply(doc, "//ns:GeocodePoint[2]/ns:Latitude", xmlValue,
namespaces = c(ns="http://schemas.microsoft.com/search/local/ws/rest/v1"))
geodfs <- lapply(seq(nrow(df))[1], function(i){
url <- paste0("http://dev.virtualearth.net/REST/v1/Locations/US/IL/",
df$Zip[[i]], "/", gsub(" ", "%20", df$City[[i]]), "/",
gsub(" ", "%20", df$Address[[i]]), "?o=xml&key=", BingMapsAPIkey)
doc <- xmlParse(url)
data.frame(LAT = xpathSApply(doc, "//ns:GeocodePoint[2]/ns:Latitude", xmlValue,
namespaces = c(ns="http://schemas.microsoft.com/search/local/ws/rest/v1")),
LON = xpathSApply(doc, "//ns:GeocodePoint[2]/ns:Longitude", xmlValue,
namespaces = c(ns="http://schemas.microsoft.com/search/local/ws/rest/v1")))
})
geodfs <- lapply(seq(nrow(df))[1], function(i){
url <- paste0("http://dev.virtualearth.net/REST/v1/Locations/US/IL/",
df$Zip[[i]], "/", gsub(" ", "%20", df$City[[i]]), "/",
gsub(" ", "%20", df$Address[[i]]), "?o=xml&key=", BingMapsAPIkey)
doc <- xmlParse(url)
data.frame(LAT = as.numeric(xpathSApply(doc, "//ns:GeocodePoint[2]/ns:Latitude", xmlValue,
namespaces = c(ns="http://schemas.microsoft.com/search/local/ws/rest/v1"))),
LON = as.numeric(xpathSApply(doc, "//ns:GeocodePoint[2]/ns:Longitude", xmlValue,
namespaces = c(ns="http://schemas.microsoft.com/search/local/ws/rest/v1"))))
})
geodfs[[1]]
View(geodfs[[1]])
geodfs <- lapply(seq(nrow(df)), function(i){
url <- paste0("http://dev.virtualearth.net/REST/v1/Locations/US/IL/",
df$Zip[[i]], "/", gsub(" ", "%20", df$City[[i]]), "/",
gsub(" ", "%20", df$Address[[i]]), "?o=xml&key=", BingMapsAPIkey)
doc <- xmlParse(url)
data.frame(LAT = as.numeric(xpathSApply(doc, "//ns:GeocodePoint[2]/ns:Latitude", xmlValue,
namespaces = c(ns="http://schemas.microsoft.com/search/local/ws/rest/v1"))),
LON = as.numeric(xpathSApply(doc, "//ns:GeocodePoint[2]/ns:Longitude", xmlValue,
namespaces = c(ns="http://schemas.microsoft.com/search/local/ws/rest/v1"))))
})
df <- cbind(df, do.call(rbind, geodfs))
View(df)
doc
setwd("D:/Freelance Work/Database_Work/LibraryDataAnalysis/SWANLibrary/DATA/SymphonyStats")
write.csv(df, "SwanLibraryAddress.csv")
library(readxl)
setwd("D:/Freelance Work/Database_Work/LibraryDataAnalysis/SWANLibrary/DATA/SymphonyStats")
library(XML)
df <- xmlToDataFrame("SWANLibraryAddress.xml", stringsAsFactors = FALSE)
orgdf <- read.csv("SWANLibraryAddress.csv", stringsAsFactors = FALSE)
View(df)
othdf <- merge(df, orgdf, by="name", all.x=TRUE)
othdf <- merge(unique(df), unique(orgdf), by="name", all.x=TRUE)
othdf <- othdf[is.na(othdf$name),]
othdf <- merge(unique(df), unique(orgdf), by="name", all.x=TRUE)
View(othdf)
View(df)
df <- xmlToDataFrame("SWANLibraryAddress.xml", stringsAsFactors = FALSE)
View(df)
othdf <- merge(unique(df), unique(orgdf), by="name", all.x=TRUE)
View(othdf[othdf$name %in% c("Frankfort", "Schiller")]
)
View(othdf[othdf$name %in% c("Frankfort", "Schiller"),])
unique(otherdf[order(othdf$name)])
unique(othdf[order(othdf$name)])
unique(othdf$name[order(othdf$name)])
View(othdf[grepl("Frankfort|Schiller", othdf$name),])
df <- xmlToDataFrame("SWANLibraryAddress.xml", stringsAsFactors = FALSE)
orgdf <- read.csv("SWANLibraryAddress.csv", stringsAsFactors = FALSE)
newdf <- xmlToDataFrame("SWANLibraryAddress.xml", stringsAsFactors = FALSE)
df <- read.csv("SWANLibraryAddress.csv", stringsAsFactors = FALSE)
View(df[grepl("Frankfort|Schiller", df$name),]))
View(df[grepl("Frankfort|Schiller", df$name),])
View(newdf[grepl("Frankfort|Schiller", newdf$name),])
View(df)
df <- merge(unique(df), View(newdf[grepl("Frankfort|Schiller", newdf$name),]), by="name", all=TRUE)
newdf <- xmlToDataFrame("SWANLibraryAddress.xml", stringsAsFactors = FALSE)
df <- read.csv("SWANLibraryAddress.csv", stringsAsFactors = FALSE)
df <- merge(unique(df), newdf[grepl("Frankfort|Schiller", newdf$name),], by="name", all=TRUE)
View(df)
View(df)
newdf <- xmlToDataFrame("SWANLibraryAddress.xml", stringsAsFactors = FALSE)
df <- read.csv("SWANLibraryAddress.csv", stringsAsFactors = FALSE)
names(df)
df <- read.csv("SWANLibraryAddress.csv", stringsAsFactors = FALSE)
df <- rbind(df,
cbind(newdf[grepl("Frankfort|Schiller", newdf$name),],
data.frame(Address= NA, City=NA, Zip=NA, LAT=NA,LON=NA))
)
View(newdf)
View(df)
df <- rbind(unique(df),
cbind(newdf[grepl("Frankfort|Schiller", newdf$name),],
data.frame(Address= NA, City=NA, Zip=NA, LAT=NA,LON=NA))
)
View(df)
BingMapsAPIkey <- "AiUV813Xbo8CEariNmeksQ0jDJeR8mgbRjbEAQQ9b-OXarp_eKacFoucr-Apndb_"
df[c("LAT", "LON"), c(79,80)]
df[c(79,80), c("LAT", "LON")]
View(df)
rownames(df) <- NULL
View(df)
df[c(79,80), c("LAT", "LON")] <- lapply(79:80, function(i){
url <- paste0("http://dev.virtualearth.net/REST/v1/Locations/US/IL/",
df$Zip[[i]], "/", gsub(" ", "%20", df$City[[i]]), "/",
gsub(" ", "%20", df$Address[[i]]), "?o=xml&key=", BingMapsAPIkey)
doc <- xmlParse(url)
c(as.numeric(xpathSApply(doc, "//ns:GeocodePoint[2]/ns:Latitude", xmlValue,
namespaces = c(ns="http://schemas.microsoft.com/search/local/ws/rest/v1"))),
as.numeric(xpathSApply(doc, "//ns:GeocodePoint[2]/ns:Longitude", xmlValue,
namespaces = c(ns="http://schemas.microsoft.com/search/local/ws/rest/v1"))))
})
df[c(79,80), c("LAT", "LON")] <- sapply(79:80, function(i){
url <- paste0("http://dev.virtualearth.net/REST/v1/Locations/US/IL/",
df$Zip[[i]], "/", gsub(" ", "%20", df$City[[i]]), "/",
gsub(" ", "%20", df$Address[[i]]), "?o=xml&key=", BingMapsAPIkey)
doc <- xmlParse(url)
c(as.numeric(xpathSApply(doc, "//ns:GeocodePoint[2]/ns:Latitude", xmlValue,
namespaces = c(ns="http://schemas.microsoft.com/search/local/ws/rest/v1"))),
as.numeric(xpathSApply(doc, "//ns:GeocodePoint[2]/ns:Longitude", xmlValue,
namespaces = c(ns="http://schemas.microsoft.com/search/local/ws/rest/v1"))))
})
sapply(79:80, function(i){
url <- paste0("http://dev.virtualearth.net/REST/v1/Locations/US/IL/",
df$Zip[[i]], "/", gsub(" ", "%20", df$City[[i]]), "/",
gsub(" ", "%20", df$Address[[i]]), "?o=xml&key=", BingMapsAPIkey)
doc <- xmlParse(url)
c(as.numeric(xpathSApply(doc, "//ns:GeocodePoint[2]/ns:Latitude", xmlValue,
namespaces = c(ns="http://schemas.microsoft.com/search/local/ws/rest/v1"))),
as.numeric(xpathSApply(doc, "//ns:GeocodePoint[2]/ns:Longitude", xmlValue,
namespaces = c(ns="http://schemas.microsoft.com/search/local/ws/rest/v1"))))
})
df$Address<- sapply(seq(nrow(df)), function(i)
gsub("\\.", "", strsplit(df$address[[i]], split=",")[[1]][1]))
df$City <- sapply(seq(nrow(df)), function(i)
trimws(strsplit(df$address[[i]], split=",")[[1]][2]))
df$Zip<- sapply(seq(nrow(df)), function(i)
trimws(gsub("IL ", "", strsplit(df$address[[i]], split=",")[[1]][3])))
View(df)
View(df)
df <- unique(df)
rownames(df) <- NULL
df[c(77,78), c("LAT", "LON")] <- sapply(79:80, function(i){
url <- paste0("http://dev.virtualearth.net/REST/v1/Locations/US/IL/",
df$Zip[[i]], "/", gsub(" ", "%20", df$City[[i]]), "/",
gsub(" ", "%20", df$Address[[i]]), "?o=xml&key=", BingMapsAPIkey)
doc <- xmlParse(url)
c(as.numeric(xpathSApply(doc, "//ns:GeocodePoint[2]/ns:Latitude", xmlValue,
namespaces = c(ns="http://schemas.microsoft.com/search/local/ws/rest/v1"))),
as.numeric(xpathSApply(doc, "//ns:GeocodePoint[2]/ns:Longitude", xmlValue,
namespaces = c(ns="http://schemas.microsoft.com/search/local/ws/rest/v1"))))
})
df[c(77,78), c("LAT", "LON")] <- sapply(77:78, function(i){
url <- paste0("http://dev.virtualearth.net/REST/v1/Locations/US/IL/",
df$Zip[[i]], "/", gsub(" ", "%20", df$City[[i]]), "/",
gsub(" ", "%20", df$Address[[i]]), "?o=xml&key=", BingMapsAPIkey)
doc <- xmlParse(url)
c(as.numeric(xpathSApply(doc, "//ns:GeocodePoint[2]/ns:Latitude", xmlValue,
namespaces = c(ns="http://schemas.microsoft.com/search/local/ws/rest/v1"))),
as.numeric(xpathSApply(doc, "//ns:GeocodePoint[2]/ns:Longitude", xmlValue,
namespaces = c(ns="http://schemas.microsoft.com/search/local/ws/rest/v1"))))
})
View(newdf)
View(df)
sapply(77:78, function(i){
url <- paste0("http://dev.virtualearth.net/REST/v1/Locations/US/IL/",
df$Zip[[i]], "/", gsub(" ", "%20", df$City[[i]]), "/",
gsub(" ", "%20", df$Address[[i]]), "?o=xml&key=", BingMapsAPIkey)
doc <- xmlParse(url)
c(as.numeric(xpathSApply(doc, "//ns:GeocodePoint[2]/ns:Latitude", xmlValue,
namespaces = c(ns="http://schemas.microsoft.com/search/local/ws/rest/v1"))),
as.numeric(xpathSApply(doc, "//ns:GeocodePoint[2]/ns:Longitude", xmlValue,
namespaces = c(ns="http://schemas.microsoft.com/search/local/ws/rest/v1"))))
})
df[c(77,78), c("LAT", "LON")] <- lapply(77:78, function(i){
url <- paste0("http://dev.virtualearth.net/REST/v1/Locations/US/IL/",
df$Zip[[i]], "/", gsub(" ", "%20", df$City[[i]]), "/",
gsub(" ", "%20", df$Address[[i]]), "?o=xml&key=", BingMapsAPIkey)
doc <- xmlParse(url)
c(as.numeric(xpathSApply(doc, "//ns:GeocodePoint[2]/ns:Latitude", xmlValue,
namespaces = c(ns="http://schemas.microsoft.com/search/local/ws/rest/v1"))),
as.numeric(xpathSApply(doc, "//ns:GeocodePoint[2]/ns:Longitude", xmlValue,
namespaces = c(ns="http://schemas.microsoft.com/search/local/ws/rest/v1"))))
})
View(df)
temp <- sapply(77:78, function(i){
url <- paste0("http://dev.virtualearth.net/REST/v1/Locations/US/IL/",
df$Zip[[i]], "/", gsub(" ", "%20", df$City[[i]]), "/",
gsub(" ", "%20", df$Address[[i]]), "?o=xml&key=", BingMapsAPIkey)
doc <- xmlParse(url)
c(as.numeric(xpathSApply(doc, "//ns:GeocodePoint[2]/ns:Latitude", xmlValue,
namespaces = c(ns="http://schemas.microsoft.com/search/local/ws/rest/v1"))),
as.numeric(xpathSApply(doc, "//ns:GeocodePoint[2]/ns:Longitude", xmlValue,
namespaces = c(ns="http://schemas.microsoft.com/search/local/ws/rest/v1"))))
})
t(temp)
df[c(77,78), c("LAT", "LON")] <- t(temp)
View(df)
View(df[order(df$name),])
View(df)
View(df[order(df$name),])
df <- df[order(df$name),]
names(df)[1] <- "Library"
View(df)
write.csv(df, "SwanLibraryAddress.csv", rownames = FALSE)
setwd("D:/Freelance Work/Database_Work/LibraryDataAnalysis/SWANLibrary/DATA/SymphonyStats")
write.csv(df, "SwanLibraryAddress.csv", row.names = FALSE)
